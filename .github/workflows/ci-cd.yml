name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  quality-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          poetry-${{ runner.os }}-${{ matrix.python-version }}-

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --with dev

    - name: Format check with Black
      run: poetry run black --check src/ metrics/ tests/

    - name: Import sorting check with isort
      run: poetry run isort --check-only src/ metrics/ tests/

    - name: Lint with flake8
      run: poetry run flake8 src/ metrics/ tests/

    - name: Lint with pylint
      run: poetry run pylint src/ metrics/ || true

    - name: Type checking with mypy
      run: poetry run mypy src/ || true

    - name: Run tests with pytest
      run: |
        poetry run pytest tests/ -v --cov=src --cov=metrics --cov-report=xml --cov-report=term-missing
      if: matrix.python-version == '3.11'

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: quality-checks
    permissions:
      security-events: write
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Security audit with Safety
      run: |
        pip install safety
        safety check --json || true

    - name: Dependency vulnerability check
      run: |
        pip install pip-audit
        pip-audit --format=json --output=pip-audit-report.json || true

    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          trivy-results.sarif
          pip-audit-report.json

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        target: [development, production, training, evaluation]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=${{ matrix.target }},enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: ${{ matrix.target }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.target }} --version || true

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install poetry
        poetry install --with dev

    - name: Run performance benchmarks
      run: |
        # Add performance testing commands here
        echo "Performance benchmarks would run here"

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: benchmark-results/

  # Documentation Build
  docs-build:
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --with docs

    - name: Build documentation
      run: |
        # poetry run mkdocs build --clean --strict
        echo "Documentation build would run here"

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan, docker-build, performance-test, docs-build]
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - name: Notify on success
      if: needs.quality-checks.result == 'success' && needs.docker-build.result == 'success'
      run: |
        echo "✅ CI/CD pipeline completed successfully"

    - name: Notify on failure
      if: needs.quality-checks.result == 'failure' || needs.docker-build.result == 'failure'
      run: |
        echo "❌ CI/CD pipeline failed"
